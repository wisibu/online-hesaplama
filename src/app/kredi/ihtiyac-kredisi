// src/app/kredi/ihtiyac-kredisi/page.tsx
"use client";

import React, { useState, FormEvent } from 'react';
// OdemePlaniSatiri interface'ini yeni dosyadan import ediyoruz
// Eğer tsconfig.json dosyanızda "@/*": ["./src/*"] gibi bir path alias (yol takma adı) varsa:
import type { OdemePlaniSatiri } from '@/types/kredi'; 
// Eğer path alias yoksa veya farklıysa, doğru göreceli yolu kullanın:
// import type { OdemePlaniSatiri } from '../../../types/kredi'; 

// OdemePlaniSatiri interface tanımı buradan kaldırıldı.

export default function IhtiyacKredisiSayfasi() {
  const [krediTutari, setKrediTutari] = useState<string>('');
  const [faizOrani, setFaizOrani] = useState<string>(''); // Aylık yüzde olarak
  const [vade, setVade] = useState<string>(''); // Ay olarak

  const [aylikTaksit, setAylikTaksit] = useState<number | null>(null);
  const [toplamGeriOdeme, setToplamGeriOdeme] = useState<number | null>(null);
  const [toplamFaiz, setToplamFaiz] = useState<number | null>(null);
  const [odemePlani, setOdemePlani] = useState<OdemePlaniSatiri[]>([]);

  const [hata, setHata] = useState<string>('');
  const [isCalculating, setIsCalculating] = useState(false);

  const formatCurrency = (value: number | null) => {
    if (value === null || isNaN(value)) return '';
    return value.toLocaleString('tr-TR', { style: 'currency', currency: 'TRY' });
  };

  const handleHesapla = async (event: FormEvent<HTMLFormElement>) => {
    event.preventDefault();
    setIsCalculating(true);
    setHata('');
    setAylikTaksit(null);
    setToplamGeriOdeme(null);
    setToplamFaiz(null);
    setOdemePlani([]);

    const P = parseFloat(krediTutari);
    const r_aylik_yuzde = parseFloat(faizOrani);
    const n = parseInt(vade);

    if (isNaN(P) || P <= 0 || isNaN(r_aylik_yuzde) || r_aylik_yuzde <= 0 || isNaN(n) || n <= 0) {
      setHata('Lütfen tüm alanları geçerli pozitif sayılarla doldurunuz.');
      setIsCalculating(false);
      return;
    }

    const r_aylik = r_aylik_yuzde / 100;

    const taksit = P * (r_aylik * Math.pow(1 + r_aylik, n)) / (Math.pow(1 + r_aylik, n) - 1);
    const toplamOdeme = taksit * n;
    const toplamOdenenFaiz = toplamOdeme - P;

    setAylikTaksit(taksit);
    setToplamGeriOdeme(toplamOdeme);
    setToplamFaiz(toplamOdenenFaiz);

    let kalanAnaParaTemp = P;
    const yeniOdemePlani: OdemePlaniSatiri[] = [];
    for (let i = 1; i <= n; i++) {
      const aylikFaizTutari = kalanAnaParaTemp * r_aylik;
      const aylikAnaParaOdemesi = taksit - aylikFaizTutari;
      kalanAnaParaTemp -= aylikAnaParaOdemesi;
      yeniOdemePlani.push({
        ay: i,
        aylikTaksit: taksit,
        anaPara: aylikAnaParaOdemesi,
        faiz: aylikFaizTutari,
        kalanAnaPara: kalanAnaParaTemp > 0.005 ? kalanAnaParaTemp : 0,
      });
    }
    setOdemePlani(yeniOdemePlani);

    try {
      const response = await fetch('/api/stats/increment', { method: 'POST' });
      if (response.ok) {
        const result = await response.json();
        console.log('Sayaç artırma API yanıtı:', result.message);
        window.dispatchEvent(new CustomEvent('statsUpdated'));
      } else {
        console.error('Sayaç artırma API hatası:', response.statusText);
      }
    } catch (apiError) {
      console.error('Sayaç artırma API çağrısında istemci taraflı sorun:', apiError);
    } finally {
      setIsCalculating(false);
    }
  };

  const blogContent = `
    <h2 class="text-2xl font-semibold text-gray-800 mb-4">İhtiyaç Kredisi Nedir ve Nasıl Hesaplanır?</h2>
    <p class="text-gray-700 mb-4 leading-relaxed">
      İhtiyaç kredisi, bireylerin eğitim, tatil, evlilik, eşya alımı gibi çeşitli kişisel harcamalarını finanse etmek amacıyla bankalardan veya finans kuruluşlarından aldıkları bir tüketici kredisi türüdür. Genellikle diğer kredi türlerine göre daha kısa vadeli ve daha esnek kullanım koşullarına sahiptir.
    </p>
    <p class="text-gray-700 mb-4 leading-relaxed">
      İhtiyaç kredisi hesaplaması yapılırken üç temel faktör göz önünde bulundurulur: çekmek istediğiniz kredi tutarı, bankanın uygulayacağı aylık veya yıllık faiz oranı ve krediyi geri ödeyeceğiniz vade (ay cinsinden süre). Bu üç bilgi ile aylık ödemeniz gereken taksit tutarı, toplam geri ödeyeceğiniz miktar ve ödeyeceğiniz toplam faiz miktarı hesaplanabilir.
    </p>
    <h3 class="text-xl font-semibold text-gray-800 mt-6 mb-3">Kredi Hesaplama Formülü</h3>
    <p class="text-gray-700 mb-4 leading-relaxed">
      Aylık eşit taksitli krediler için kullanılan standart formül şu şekildedir:
      <br />
      <strong>M = P * [r * (1+r)<sup>n</sup>] / [(1+r)<sup>n</sup> – 1]</strong>
      <br />
      Burada:
    </p>
    <ul class="list-disc list-inside text-gray-700 mb-4 pl-4 leading-relaxed">
      <li><strong>M:</strong> Aylık Taksit Tutarı</li>
      <li><strong>P:</strong> Çekilen Kredi Tutarı (Ana Para)</li>
      <li><strong>r:</strong> Aylık Faiz Oranı (Yıllık faiz oranı / 12 / 100)</li>
      <li><strong>n:</strong> Toplam Vade Sayısı (Ay)</li>
    </ul>
    <p class="text-gray-700 mb-4 leading-relaxed">
      Sitemizdeki bu ihtiyaç kredisi hesaplama aracı, bu formülü kullanarak size hızlı ve doğru sonuçlar sunar. Kredi tutarını, aylık faiz oranını (yüzde olarak) ve vadeyi girerek kolayca hesaplama yapabilirsiniz.
    </p>
    <h3 class="text-xl font-semibold text-gray-800 mt-6 mb-3">İhtiyaç Kredisi Alırken Dikkat Edilmesi Gerekenler</h3>
     <p class="text-gray-700 mb-4 leading-relaxed">
      İhtiyaç kredisi kullanmadan önce farklı bankaların faiz oranlarını, dosya masraflarını ve diğer ek ücretlerini karşılaştırmak önemlidir. Ayrıca, aylık taksitlerin bütçenizi aşmamasına ve ödeme planınızın size uygun olmasına dikkat etmelisiniz. Erken ödeme koşulları ve sigorta gibi ek hizmetler hakkında da bilgi almanız faydalı olacaktır.
    </p>
  `;

  return (
    <>
      {/* Meta verileri için ideal çözüm generateMetadata kullanmaktır. */}
      {/* Bu sayfanın başlığını ve açıklamasını dinamik olarak ayarlamak için */}
      {/* bu dosyanın dışında bir generateMetadata fonksiyonu tanımlanabilir. */}
      {/* Örneğin: */}
      {/*
      // src/app/kredi/ihtiyac-kredisi/page.tsx (generateMetadata örneği - dosyanın dışında veya ayrı bir dosyada)
      // import type { Metadata } from 'next'
      // export async function generateMetadata(): Promise<Metadata> {
      //   return {
      //     title: "İhtiyaç Kredisi Hesaplama Aracı | Faiz ve Taksit Hesapla - OnlineHesaplama.NET",
      //     description: "Online ihtiyaç kredisi hesaplama aracıyla anında aylık taksit, toplam geri ödeme ve faiz tutarını öğrenin. En uygun kredi seçeneklerini karşılaştırın.",
      //     keywords: "ihtiyaç kredisi hesaplama, kredi faiz oranları, taksit hesaplama, bireysel kredi, tüketici kredisi, online kredi hesaplama",
      //   }
      // }
      */}
      <div className="w-full max-w-4xl mx-auto py-8 px-4">
        
        <section className="mb-10 p-6 bg-gray-50 rounded-lg shadow">
          <h1 className="text-3xl sm:text-4xl font-bold text-center mb-4 text-black">
            İhtiyaç Kredisi Hesaplama
          </h1>
          <p className="text-md text-gray-700 text-center leading-relaxed">
            Aşağıdaki formu kullanarak çekmek istediğiniz ihtiyaç kredisinin aylık taksitlerini, toplam geri ödeme tutarını ve toplam faizini kolayca hesaplayabilirsiniz.
          </p>
        </section>

        <section className="w-full max-w-lg mx-auto bg-white p-8 rounded-lg shadow-lg mb-12">
          <form onSubmit={handleHesapla}>
            <div className="mb-5">
              <label htmlFor="krediTutari" className="block text-sm font-medium text-gray-700 mb-1">
                Kredi Tutarı (TL)
              </label>
              <input
                type="text"
                id="krediTutari"
                value={krediTutari}
                onChange={(e) => setKrediTutari(e.target.value.replace(/[^0-9.]/g, ''))}
                placeholder="Örn: 50000"
                className="mt-1 block w-full px-3 py-2.5 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-gray-500 focus:border-gray-500 sm:text-sm"
                disabled={isCalculating}
              />
            </div>

            <div className="mb-5">
              <label htmlFor="faizOrani" className="block text-sm font-medium text-gray-700 mb-1">
                Aylık Faiz Oranı (%)
              </label>
              <input
                type="text"
                id="faizOrani"
                value={faizOrani}
                onChange={(e) => setFaizOrani(e.target.value.replace(/[^0-9.]/g, ''))}
                placeholder="Örn: 1.89"
                className="mt-1 block w-full px-3 py-2.5 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-gray-500 focus:border-gray-500 sm:text-sm"
                disabled={isCalculating}
              />
            </div>

            <div className="mb-6">
              <label htmlFor="vade" className="block text-sm font-medium text-gray-700 mb-1">
                Vade (Ay)
              </label>
              <input
                type="text"
                id="vade"
                value={vade}
                onChange={(e) => setVade(e.target.value.replace(/[^0-9]/g, ''))}
                placeholder="Örn: 36"
                className="mt-1 block w-full px-3 py-2.5 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-gray-500 focus:border-gray-500 sm:text-sm"
                disabled={isCalculating}
              />
            </div>

            <button
              type="submit"
              className="w-full flex justify-center py-3 px-4 border border-transparent rounded-md shadow-sm text-base font-medium text-white bg-black hover:bg-gray-800 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-black disabled:opacity-70"
              disabled={isCalculating}
            >
              {isCalculating ? 'Hesaplanıyor...' : 'Hesapla'}
            </button>
          </form>

          {hata && (
            <p className="mt-5 text-center text-red-600 bg-red-50 p-3 rounded-md">
              {hata}
            </p>
          )}

          {aylikTaksit !== null && !hata && (
            <div className="mt-8 space-y-4">
              <h2 className="text-2xl font-semibold text-black text-center">Hesaplama Sonuçları</h2>
              <div className="p-4 bg-gray-50 rounded-md shadow">
                <div className="flex justify-between items-center py-2 border-b border-gray-200">
                  <span className="text-gray-600">Aylık Taksit Tutarı:</span>
                  <span className="font-bold text-black text-lg">{formatCurrency(aylikTaksit)}</span>
                </div>
                <div className="flex justify-between items-center py-2 border-b border-gray-200">
                  <span className="text-gray-600">Toplam Geri Ödeme:</span>
                  <span className="font-bold text-black">{formatCurrency(toplamGeriOdeme)}</span>
                </div>
                <div className="flex justify-between items-center py-2">
                  <span className="text-gray-600">Toplam Faiz Tutarı:</span>
                  <span className="font-bold text-black">{formatCurrency(toplamFaiz)}</span>
                </div>
              </div>

              {odemePlani.length > 0 && (
                <div className="mt-6">
                  <h3 className="text-xl font-semibold text-black mb-3 text-center">Ödeme Planı Tablosu</h3>
                  <div className="overflow-x-auto rounded-md shadow">
                    <table className="min-w-full bg-white border border-gray-200">
                      <thead className="bg-gray-100">
                        <tr>
                          <th className="px-4 py-2.5 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Ay</th>
                          <th className="px-4 py-2.5 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">Taksit</th>
                          <th className="px-4 py-2.5 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">Ana Para</th>
                          <th className="px-4 py-2.5 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">Faiz</th>
                          <th className="px-4 py-2.5 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">Kalan Ana Para</th>
                        </tr>
                      </thead>
                      <tbody className="divide-y divide-gray-200">
                        {odemePlani.map((satir) => (
                          <tr key={satir.ay} className="hover:bg-gray-50">
                            <td className="px-4 py-2.5 whitespace-nowrap text-sm text-gray-700">{satir.ay}</td>
                            <td className="px-4 py-2.5 whitespace-nowrap text-sm text-gray-700 text-right">{formatCurrency(satir.aylikTaksit)}</td>
                            <td className="px-4 py-2.5 whitespace-nowrap text-sm text-gray-700 text-right">{formatCurrency(satir.anaPara)}</td>
                            <td className="px-4 py-2.5 whitespace-nowrap text-sm text-gray-700 text-right">{formatCurrency(satir.faiz)}</td>
                            <td className="px-4 py-2.5 whitespace-nowrap text-sm text-gray-700 text-right">{formatCurrency(satir.kalanAnaPara)}</td>
                          </tr>
                        ))}
                      </tbody>
                    </table>
                  </div>
                </div>
              )}
            </div>
          )}
        </section>

        <section className="prose prose-sm sm:prose-base lg:prose-lg max-w-none p-6 bg-gray-50 rounded-lg shadow mt-12">
          <div dangerouslySetInnerHTML={{ __html: blogContent }} />
        </section>
      </div>
    </>
  );
}
